// source: monitor.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.monitor.CPUCoreUsage', null, global);
goog.exportSymbol('proto.monitor.CPUStatsResponse', null, global);
goog.exportSymbol('proto.monitor.Disk_usage', null, global);
goog.exportSymbol('proto.monitor.Memory_usage', null, global);
goog.exportSymbol('proto.monitor.StatsRequest', null, global);
goog.exportSymbol('proto.monitor.StatsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.StatsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.StatsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.monitor.StatsRequest.displayName = 'proto.monitor.StatsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.CPUCoreUsage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.CPUCoreUsage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.monitor.CPUCoreUsage.displayName = 'proto.monitor.CPUCoreUsage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.Memory_usage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.Memory_usage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.monitor.Memory_usage.displayName = 'proto.monitor.Memory_usage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.Disk_usage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.Disk_usage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.monitor.Disk_usage.displayName = 'proto.monitor.Disk_usage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.CPUStatsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.monitor.CPUStatsResponse.repeatedFields_, null);
};
goog.inherits(proto.monitor.CPUStatsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.monitor.CPUStatsResponse.displayName = 'proto.monitor.CPUStatsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.StatsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.StatsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.monitor.StatsResponse.displayName = 'proto.monitor.StatsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.StatsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.StatsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.StatsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.StatsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.StatsRequest}
 */
proto.monitor.StatsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.StatsRequest;
  return proto.monitor.StatsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.StatsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.StatsRequest}
 */
proto.monitor.StatsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.StatsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.StatsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.StatsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.StatsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.CPUCoreUsage.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.CPUCoreUsage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.CPUCoreUsage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.CPUCoreUsage.toObject = function(includeInstance, msg) {
  var f, obj = {
    core: jspb.Message.getFieldWithDefault(msg, 1, ""),
    usage: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.CPUCoreUsage}
 */
proto.monitor.CPUCoreUsage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.CPUCoreUsage;
  return proto.monitor.CPUCoreUsage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.CPUCoreUsage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.CPUCoreUsage}
 */
proto.monitor.CPUCoreUsage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUsage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.CPUCoreUsage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.CPUCoreUsage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.CPUCoreUsage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.CPUCoreUsage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCore();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsage();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string core = 1;
 * @return {string}
 */
proto.monitor.CPUCoreUsage.prototype.getCore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.monitor.CPUCoreUsage} returns this
 */
proto.monitor.CPUCoreUsage.prototype.setCore = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double usage = 2;
 * @return {number}
 */
proto.monitor.CPUCoreUsage.prototype.getUsage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.CPUCoreUsage} returns this
 */
proto.monitor.CPUCoreUsage.prototype.setUsage = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.Memory_usage.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.Memory_usage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.Memory_usage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.Memory_usage.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    used: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.Memory_usage}
 */
proto.monitor.Memory_usage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.Memory_usage;
  return proto.monitor.Memory_usage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.Memory_usage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.Memory_usage}
 */
proto.monitor.Memory_usage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.Memory_usage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.Memory_usage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.Memory_usage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.Memory_usage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUsed();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 total = 1;
 * @return {number}
 */
proto.monitor.Memory_usage.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.Memory_usage} returns this
 */
proto.monitor.Memory_usage.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 used = 2;
 * @return {number}
 */
proto.monitor.Memory_usage.prototype.getUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.Memory_usage} returns this
 */
proto.monitor.Memory_usage.prototype.setUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.Disk_usage.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.Disk_usage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.Disk_usage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.Disk_usage.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    used: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.Disk_usage}
 */
proto.monitor.Disk_usage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.Disk_usage;
  return proto.monitor.Disk_usage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.Disk_usage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.Disk_usage}
 */
proto.monitor.Disk_usage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.Disk_usage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.Disk_usage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.Disk_usage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.Disk_usage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUsed();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 total = 1;
 * @return {number}
 */
proto.monitor.Disk_usage.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.Disk_usage} returns this
 */
proto.monitor.Disk_usage.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 used = 2;
 * @return {number}
 */
proto.monitor.Disk_usage.prototype.getUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.Disk_usage} returns this
 */
proto.monitor.Disk_usage.prototype.setUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.monitor.CPUStatsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.CPUStatsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.CPUStatsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.CPUStatsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.CPUStatsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalUsage: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    coresUsageList: jspb.Message.toObjectList(msg.getCoresUsageList(),
    proto.monitor.CPUCoreUsage.toObject, includeInstance),
    btime: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.CPUStatsResponse}
 */
proto.monitor.CPUStatsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.CPUStatsResponse;
  return proto.monitor.CPUStatsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.CPUStatsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.CPUStatsResponse}
 */
proto.monitor.CPUStatsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalUsage(value);
      break;
    case 2:
      var value = new proto.monitor.CPUCoreUsage;
      reader.readMessage(value,proto.monitor.CPUCoreUsage.deserializeBinaryFromReader);
      msg.addCoresUsage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.CPUStatsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.CPUStatsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.CPUStatsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.CPUStatsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalUsage();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getCoresUsageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.monitor.CPUCoreUsage.serializeBinaryToWriter
    );
  }
  f = message.getBtime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional double total_usage = 1;
 * @return {number}
 */
proto.monitor.CPUStatsResponse.prototype.getTotalUsage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.CPUStatsResponse} returns this
 */
proto.monitor.CPUStatsResponse.prototype.setTotalUsage = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * repeated CPUCoreUsage cores_usage = 2;
 * @return {!Array<!proto.monitor.CPUCoreUsage>}
 */
proto.monitor.CPUStatsResponse.prototype.getCoresUsageList = function() {
  return /** @type{!Array<!proto.monitor.CPUCoreUsage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.monitor.CPUCoreUsage, 2));
};


/**
 * @param {!Array<!proto.monitor.CPUCoreUsage>} value
 * @return {!proto.monitor.CPUStatsResponse} returns this
*/
proto.monitor.CPUStatsResponse.prototype.setCoresUsageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.monitor.CPUCoreUsage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.monitor.CPUCoreUsage}
 */
proto.monitor.CPUStatsResponse.prototype.addCoresUsage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.monitor.CPUCoreUsage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.monitor.CPUStatsResponse} returns this
 */
proto.monitor.CPUStatsResponse.prototype.clearCoresUsageList = function() {
  return this.setCoresUsageList([]);
};


/**
 * optional uint64 btime = 3;
 * @return {number}
 */
proto.monitor.CPUStatsResponse.prototype.getBtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.CPUStatsResponse} returns this
 */
proto.monitor.CPUStatsResponse.prototype.setBtime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.StatsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.StatsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.StatsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.StatsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cpuUsageTotal: (f = msg.getCpuUsageTotal()) && proto.monitor.CPUStatsResponse.toObject(includeInstance, f),
    memoryUsage: (f = msg.getMemoryUsage()) && proto.monitor.Memory_usage.toObject(includeInstance, f),
    diskUsage: (f = msg.getDiskUsage()) && proto.monitor.Disk_usage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.StatsResponse}
 */
proto.monitor.StatsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.StatsResponse;
  return proto.monitor.StatsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.StatsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.StatsResponse}
 */
proto.monitor.StatsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.monitor.CPUStatsResponse;
      reader.readMessage(value,proto.monitor.CPUStatsResponse.deserializeBinaryFromReader);
      msg.setCpuUsageTotal(value);
      break;
    case 2:
      var value = new proto.monitor.Memory_usage;
      reader.readMessage(value,proto.monitor.Memory_usage.deserializeBinaryFromReader);
      msg.setMemoryUsage(value);
      break;
    case 3:
      var value = new proto.monitor.Disk_usage;
      reader.readMessage(value,proto.monitor.Disk_usage.deserializeBinaryFromReader);
      msg.setDiskUsage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.StatsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.StatsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.StatsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.StatsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCpuUsageTotal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.monitor.CPUStatsResponse.serializeBinaryToWriter
    );
  }
  f = message.getMemoryUsage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.monitor.Memory_usage.serializeBinaryToWriter
    );
  }
  f = message.getDiskUsage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.monitor.Disk_usage.serializeBinaryToWriter
    );
  }
};


/**
 * optional CPUStatsResponse cpu_usage_total = 1;
 * @return {?proto.monitor.CPUStatsResponse}
 */
proto.monitor.StatsResponse.prototype.getCpuUsageTotal = function() {
  return /** @type{?proto.monitor.CPUStatsResponse} */ (
    jspb.Message.getWrapperField(this, proto.monitor.CPUStatsResponse, 1));
};


/**
 * @param {?proto.monitor.CPUStatsResponse|undefined} value
 * @return {!proto.monitor.StatsResponse} returns this
*/
proto.monitor.StatsResponse.prototype.setCpuUsageTotal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.monitor.StatsResponse} returns this
 */
proto.monitor.StatsResponse.prototype.clearCpuUsageTotal = function() {
  return this.setCpuUsageTotal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.monitor.StatsResponse.prototype.hasCpuUsageTotal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Memory_usage memory_usage = 2;
 * @return {?proto.monitor.Memory_usage}
 */
proto.monitor.StatsResponse.prototype.getMemoryUsage = function() {
  return /** @type{?proto.monitor.Memory_usage} */ (
    jspb.Message.getWrapperField(this, proto.monitor.Memory_usage, 2));
};


/**
 * @param {?proto.monitor.Memory_usage|undefined} value
 * @return {!proto.monitor.StatsResponse} returns this
*/
proto.monitor.StatsResponse.prototype.setMemoryUsage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.monitor.StatsResponse} returns this
 */
proto.monitor.StatsResponse.prototype.clearMemoryUsage = function() {
  return this.setMemoryUsage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.monitor.StatsResponse.prototype.hasMemoryUsage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Disk_usage disk_usage = 3;
 * @return {?proto.monitor.Disk_usage}
 */
proto.monitor.StatsResponse.prototype.getDiskUsage = function() {
  return /** @type{?proto.monitor.Disk_usage} */ (
    jspb.Message.getWrapperField(this, proto.monitor.Disk_usage, 3));
};


/**
 * @param {?proto.monitor.Disk_usage|undefined} value
 * @return {!proto.monitor.StatsResponse} returns this
*/
proto.monitor.StatsResponse.prototype.setDiskUsage = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.monitor.StatsResponse} returns this
 */
proto.monitor.StatsResponse.prototype.clearDiskUsage = function() {
  return this.setDiskUsage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.monitor.StatsResponse.prototype.hasDiskUsage = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.monitor);
